using System;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        // Allocate some memory
        for (int i = 0; i < 100000; i++)
        {
            var temp = new object(); // Create many short-lived objects
        }

        Console.WriteLine("Memory allocated, now GC will collect soon...");

        // Run GC explicitly (not recommended normally)
        GC.Collect();
        GC.WaitForPendingFinalizers();

        Console.WriteLine("Garbage collected!");

        // Run a background task
        Task task = Task.Run(() =>
        {
            Console.WriteLine("Task running on thread ID: " + Environment.CurrentManagedThreadId);
        });

        task.Wait();
    }
}

When is Garbage Collection called?

When does garbage collection run?
Garbage collection can run in several scenarios:
When memory is low: The runtime can trigger garbage collection when the system is running low on memory.
When the heap is full: When the heap is full, the runtime will trigger garbage collection to reclaim memory and make room for new objects.
Periodically: The runtime can also trigger garbage collection periodically, based on a timer or other heuristics.
When the application is idle: Some garbage collectors, like the concurrent garbage collector, can run in the background while the application is idle.