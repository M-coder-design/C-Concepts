using System;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        // Allocate some memory
        for (int i = 0; i < 100000; i++)
        {
            var temp = new object(); // Create many short-lived objects
        }

        Console.WriteLine("Memory allocated, now GC will collect soon...");

        // Run GC explicitly (not recommended normally)
        GC.Collect();
        GC.WaitForPendingFinalizers();

        Console.WriteLine("Garbage collected!");

        // Run a background task
        Task task = Task.Run(() =>
        {
            Console.WriteLine("Task running on thread ID: " + Environment.CurrentManagedThreadId);
        });

        task.Wait();
    }
}

When is Garbage Collection called?

When does garbage collection run?
Garbage collection can run in several scenarios:
When memory is low: The runtime can trigger garbage collection when the system is running low on memory.
When the heap is full: When the heap is full, the runtime will trigger garbage collection to reclaim memory and make room for new objects.
Periodically: The runtime can also trigger garbage collection periodically, based on a timer or other heuristics.
When the application is idle: Some garbage collectors, like the concurrent garbage collector, can run in the background while the application is idle.

GC.WaitForPendingFinalizers() - 
This method suspends the current thread until the finalizers (destructors) of all objects that were flagged for garbage collection during the most recent garbage collection cycle have completed.
Finalizers are methods that are called just before an object is garbage collected, allowing the object to release any unmanaged resources it holds.

Why wait for finalizers?
Waiting for finalizers can be important in scenarios where:
Resource cleanup: You need to ensure that unmanaged resources, such as file handles or database connections, are properly released.
Testing and verification: You want to verify that finalizers are working correctly and that resources are being released as expected.
Synchronization: You need to synchronize the execution of your code with the completion of finalizers.

Example: 
public class FileHandler
{
    private IntPtr fileHandle;

    public FileHandler(string filePath)
    {
        fileHandle = OpenFile(filePath);
    }

    ~FileHandler()
    {
        CloseFile(fileHandle);
    }

    // ...
}